name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy after building? (true/false)'
        required: false
        default: 'false'
  # Trigger on push to main
  push:
    branches:
      - main

  # Trigger on pull request targeting main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug:List Repository Files
        run: ls -R  # Debugging step to check file structure

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.6'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest

      - name: Run Tests
        run: pytest || echo "No tests found."

      - name: Build Docker Image with Docker Compose
        working-directory: backend
        run: docker compose build

  push-image:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: backend
          push: true
          tags: yasinmh99/hideme:latest

  deploy:
    if: ${{ github.event.inputs.deploy == 'true' || github.event_name == 'push' || github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Remote Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          script: |
            export GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}

            # Create the setup script file and write the secret content to it properly
            cat << 'EOF' > setup.sh
            ${{ secrets.SETUP_SCRIPT }}
            EOF

            # Make it executable
            chmod +x setup.sh

            # Run the setup script
            ./setup.sh

            # Ensure SSH knows the host and doesn't prompt for confirmation
            mkdir -p ~/.ssh
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts

            # Remove the old directory
            sudo rm -rf Hideme_Backend

            # Clone the repository without SSH host confirmation issues

            git clone --branch main git@github.com:yasinhessnawi1/Hideme_Backend.git

            cd Hideme_Backend/backend

            # Set environment variable
            echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > .env

            # Build and run the Docker container
            sudo docker compose build
            sudo docker compose up -d
