name: CI/CD Pipeline

on:
  workflow_dispatch: {}
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.6'
      - name: Install flake8
        run: pip install flake8
      - name: Lint Python code
        run: flake8 backend

  lint-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.59.1
      - name: Go mod tidy
        run: go mod tidy
        working-directory: gobackend
      - name: Lint Go code
        run: $(go env GOPATH)/bin/golangci-lint run ./... || true
        working-directory: gobackend

  test-python:
    runs-on: ubuntu-latest
    env:
      GEMINI_API_KEY: dummy_key
      GO_BACKEND_URL: http://localhost:8080
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.6'
      - name: Install dependencies
        run: |
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx
      - name: Run Python tests with coverage
        run: pytest --cov=backend.app --cov-report=html backend

  test-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Run Go tests
        run: cd gobackend && go test ./...

  infra-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Validate
        run: cd hidemeinfra && terraform init -backend=false && terraform validate
      - name: Terraform Format
        run: cd hidemeinfra && terraform fmt -check -recursive
      - name: Install tfsec
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
      - name: Run tfsec
        run: cd hidemeinfra && tfsec .

  deploy:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    # Uncomment the line below to require successful completion of all other jobs before deploy
    # needs: [lint-python, lint-go, test-python, test-go, infra-check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Get instance name from group
        id: get_instance
        run: |
          INSTANCE=$(gcloud compute instances list \
            --filter="name~'^hide-me' AND zone:('${{ secrets.GCP_ZONE }}')" \
            --project="${{ secrets.GCP_PROJECT_ID }}" \
            --format="value(name)" | head -n1)
          echo "INSTANCE_NAME=$INSTANCE" >> $GITHUB_ENV
          echo "Selected instance: $INSTANCE"

      - id: 'compute-ssh'
        uses: 'google-github-actions/ssh-compute@v1'
        with:
          instance_name: ${{ env.INSTANCE_NAME }}
          zone: ${{ secrets.GCP_ZONE }}
          ssh_private_key: '${{ secrets.REMOTE_SSH_KEY }}'
          user: 'ra91mi91am_gmail_com'
          command: |
            cd /opt/Hideme_Backend
            git pull
            cd backend
            sudo docker compose down || true
            sudo docker compose build
            sudo docker compose up -d
            cd ../gobackend
            sudo docker compose down || true
            sudo docker compose build
            sudo docker compose up -d
